//
//  HomeInteractor.swift
//  VuduTV
//
//  Created by Mcbook Pro on 02.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func getMovies(request: Home.Movies.Request, complition: @escaping(Bool)->Void )
    func getTrendingTv(request: Home.Movies.Request,complition: @escaping(Bool)->Void )
    func getPopular(request: Home.Movies.Request, complition: @escaping(Bool)->Void )
    func getUpcomingMovies(request: Home.Movies.Request,complition: @escaping(Bool)->Void )
    func getTopRated(request: Home.Movies.Request, complition: @escaping(Bool)->Void )
    func getTreiler(movie: TitlePreviewViewModel)

}

protocol HomeDataStore
{
  
    var movieModel: TitlePreviewViewModel? { get set }
}

// MARK: - Clean components

class HomeInteractor
{
    var presenter: HomePresentationLogic?
    var worker: HomeWorker?
    
    var movieModel: TitlePreviewViewModel?
    
}

extension HomeInteractor: HomeBusinessLogic, HomeDataStore {
  
    // MARK: Do buisinessLogic
    func getMovies(request: Home.Movies.Request, complition: @escaping (Bool) -> Void) {
        worker = HomeWorker(apiManager: APICaller())
        worker?.fetchTrendingMovies(complition: { movies in
            
            DispatchQueue.main.async { [weak self] in
                complition(true)
                let response = Home.Movies.Response(movies: movies)
                self?.presenter?.presentMovies(response: response)
            }
        })
    }
    
 
    func getTrendingTv(request: Home.Movies.Request, complition: @escaping (Bool)->Void ) {
        worker = HomeWorker(apiManager: APICaller())
        worker?.fetchTrendingTv(complition: { movies in
            
            DispatchQueue.main.async { [weak self] in
                let response = Home.Movies.Response(movies: movies)
                self?.presenter?.presentTrendingTv(response: response)
                complition(true)
            }
        })
    }
    
    func getPopular(request: Home.Movies.Request, complition: @escaping (Bool) -> Void) {
        worker = HomeWorker(apiManager: APICaller())
        worker?.fetchPopular(complition: { movies in

            DispatchQueue.main.async { [weak self] in
                let response = Home.Movies.Response(movies: movies)
                self?.presenter?.presentPopular(response: response)
                complition(true)
            }
        })
    }

    func getUpcomingMovies(request: Home.Movies.Request, complition: @escaping (Bool) -> Void) {
        worker = HomeWorker(apiManager: APICaller())
        worker?.fetchUpcomingMovies(complition: { movies in

            DispatchQueue.main.async { [weak self] in
                let response = Home.Movies.Response(movies: movies)
                self?.presenter?.presentUpcomingMovies(response: response)
                complition(true)
            }
        })
    }

    func getTopRated(request: Home.Movies.Request, complition: @escaping (Bool) -> Void) {
        worker = HomeWorker(apiManager: APICaller())
        worker?.fetchTopRated(complition: { movies in

            DispatchQueue.main.async { [weak self] in
                let response = Home.Movies.Response(movies: movies)
                self?.presenter?.presentTopRated(response: response)
                complition(true)
            }
        })
    }
    
    func getTreiler(movie: TitlePreviewViewModel) {
        self.movieModel = TitlePreviewViewModel(title: movie.title, youtubeView: movie.youtubeView, titleOverview: movie.titleOverview)
        presenter?.presentTreiler(response: Home.MoviePreview.Response())
    }
}
   
    
    
    

