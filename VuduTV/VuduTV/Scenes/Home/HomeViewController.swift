//
//  HomeViewController.swift
//  VuduTV
//
//  Created by Mcbook Pro on 02.09.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Sections: Int {
    case TrendingMovies = 0
    case TrendingTv = 1
    case Popular = 2
    case Upcoming = 3
    case TopRated = 4
}

protocol HomeDisplayLogic: AnyObject
{
    func displayMovies(viewModel: Home.Movies.ViewModel)
    func displayTrendingTv(viewModel: Home.Movies.ViewModel)
    func displayPopular(viewModel: Home.Movies.ViewModel)
    func displayUpcomingMovies(viewModel: Home.Movies.ViewModel)
    func displayToprated(viewModel: Home.Movies.ViewModel)
    
    func displayMoviePreview(viewModel: Home.MoviePreview.ViewModel )
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    
    // MARK: - Clean Components
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: - View
    
    private lazy var homeFeedTable: UITableView = {
        let view = UITableView(frame: .zero, style: .grouped)
        view.backgroundColor = .black
        return view
    }()
    
    // MARK: - Fields
    let sectionTytles: [String] = ["Trending Movies","Trending Tv", "Popular", "Upcoming Movies",  "Top rated"]
    
    var trendingMovies: [Title] = []
    var trendingTv: [Title] = []
    var popular: [Title] = []
    var upcomingMovies: [Title] = []
    var topRated: [Title] = []
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupView()
    }
    
    override func viewDidLayoutSubviews() {
        super .viewDidLayoutSubviews()
        
        homeFeedTable.frame = view.bounds
    }
    
    // MARK: - Private Methods
    
    private func setupView() {
        title = "VUDU TV"
        view.addSubview(homeFeedTable)
        let headerView = HerroHeaderUIView(frame: CGRect(x: 0, y: 0, width: view.bounds.width, height: 450))
        homeFeedTable.tableHeaderView = headerView
        homeFeedTable.delegate = self
        homeFeedTable.dataSource = self
        homeFeedTable.register( CollectionViewTableViewCell.self, forCellReuseIdentifier: CollectionViewTableViewCell.identifier)
    }
    
    
    func displayMovies(viewModel: Home.Movies.ViewModel)
    {
        self.trendingMovies = viewModel.movies
        
    }
    func displayTrendingTv(viewModel: Home.Movies.ViewModel)
    {
        self.trendingTv = viewModel.movies
    }
    func displayPopular(viewModel: Home.Movies.ViewModel)
    {
        self.popular = viewModel.movies
        
    }
    func displayUpcomingMovies(viewModel: Home.Movies.ViewModel)
    {
        self.upcomingMovies = viewModel.movies
        
    }
    func displayToprated(viewModel: Home.Movies.ViewModel)
    {
        self.topRated = viewModel.movies
        
    }
    
    func displayMoviePreview(viewModel: Home.MoviePreview.ViewModel) {
        router?.routeToMoviePreview()
        
    }
}
// MARK: - UITableViewDataSource/Delegate

extension HomeViewController: UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return sectionTytles.count
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CollectionViewTableViewCell.identifier, for: indexPath) as? CollectionViewTableViewCell else{
            
            return UITableViewCell()
        }
        cell.delegate = self
        
        switch indexPath.section {
        case Sections.TrendingMovies.rawValue:
            interactor?.getMovies(request: Home.Movies.Request(), complition: { response in
                if response {
                    cell.configure(with: self.trendingMovies)
                }
            })
            
        case Sections.TrendingTv.rawValue:
            interactor?.getTrendingTv(request: Home.Movies.Request(), complition: { response in
                if response {
                    cell.configure(with: self.trendingTv )
                }
            })
        case Sections.Popular.rawValue:
            
            interactor?.getPopular(request: Home.Movies.Request(), complition: { response in
                if response {
                    cell.configure(with: self.popular)
                }
            })
            
        case Sections.Upcoming.rawValue:
            interactor?.getUpcomingMovies(request: Home.Movies.Request(), complition: { response in
                if response {
                    cell.configure(with: self.upcomingMovies )
                }
            })
            
        case Sections.TopRated.rawValue:
            interactor?.getTopRated(request: Home.Movies.Request(), complition: { response in
                if response {
                    cell.configure(with: self.topRated)
                }
            })
            
        default:
            return UITableViewCell()
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return  200
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }
    
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return sectionTytles[section]
    }
    
    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        guard let header = view as? UITableViewHeaderFooterView else {return}
        header.textLabel?.textColor = .white
        header.textLabel?.text? = (header.textLabel?.text?.capitalizeFirstLetter())!
        
        header.textLabel?.font = .systemFont(ofSize: 20, weight: .semibold)
        header.textLabel?.frame = CGRect(x: header.bounds.origin.x + 20, y: header.bounds.origin.y, width: 100, height: header.bounds.height)
    }
}

extension HomeViewController: CollectionViewTableViewCellDelegate {
    func collectionViewTableViewCellDidTapCell(viewModel: TitlePreviewViewModel) {
        interactor?.getTreiler(movie: viewModel)
    }
}
